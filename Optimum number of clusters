# Load necessary libraries
library(factoextra)   # For cluster visualization
library(NbClust)      # For determining optimal number of clusters

# Scale the dataset (excluding the first column, assuming it's an ID or non-numeric)
df <- scale(WHEAT[, -1])
head(df)

# Visualize multiple methods at once (Silhouette, WSS/Elbow, Gap Statistic)
fviz_nbclust(df, FUNcluster, method = c("silhouette", "wss", "gap_stat"))

# Elbow Method: Plot WSS to identify "elbow" point indicating optimal clusters
fviz_nbclust(df, kmeans, method = "wss") +
  geom_vline(xintercept = 4, linetype = 2) +  # Add vertical line at 4 clusters as example
  labs(subtitle = "Elbow method")

# Silhouette Method: Plot average silhouette width to find best cluster count
fviz_nbclust(df, kmeans, method = "silhouette") +
  labs(subtitle = "Silhouette method")

# Gap Statistic: Compare observed WSS with null reference to find optimal k
set.seed(123)  # For reproducibility
fviz_nbclust(df, kmeans, nstart = 25, method = "gap_stat", nboot = 50) +
  labs(subtitle = "Gap statistic method")

# Use NbClust package for k-means clustering - evaluates multiple indices
NbClust(data = df, diss = NULL, distance = "euclidean", min.nc = 2, max.nc = 15,
        method = "kmeans", index = "all", alphaBeale = 0.1)

# Use NbClust package for hierarchical clustering (average linkage)
NbClust(data = df, diss = NULL, distance = "euclidean", min.nc = 2, max.nc = 15,
        method = "average", index = "all", alphaBeale = 0.1)

# Enhanced Silhouette Plot with bigger font sizes for better readability
fviz_nbclust(df, kmeans, method = "silhouette") +
  labs(subtitle = "Silhouette method") +
  theme(
    plot.subtitle = element_text(size = 18),  # Subtitle font size
    axis.title = element_text(size = 18),     # Axis titles font size
    axis.text = element_text(size = 16)       # Axis ticks font size
  )

###Results
library(factoextra)
> df <- scale(WHEAT[ ,-1])
> head(df)
            DTE        DTH        DTF        DOM         PH        SE
[1,] -0.8514668 -0.6639174 -0.3475568 -0.8978627  0.3646870 0.1839734
[2,] -0.1442820  3.8568451  4.1764172  3.7467568 -0.9013760 1.1764055
[3,] -0.8514668 -0.9868290 -0.7467310 -1.4608469  0.7378424 0.6041271
[4,] -0.8514668 -0.9868290 -0.7467310 -1.4608469 -1.8555877 1.2597118
[5,] -0.8514668 -0.9868290 -0.7467310 -0.6163706  0.8271332 0.9771946
[6,] -1.0871951 -0.9868290 -0.7467310 -1.1793548  0.6618787 0.9590846
            SPL        FLL        FLW         NOT       SPPS       SPSP
[1,] -0.9043696 -0.7523550 -1.8187694  0.19717178 -0.4884744 -2.3358148
[2,] -0.9043696  3.2163095 -2.1049049  0.47340279 -1.5865951 -2.3358148
[3,] -1.0875444 -0.7804352 -2.2956619 -0.07905922  1.7077671  0.2300424
[4,] -0.1978379 -0.7149148 -2.2956619 -0.35529022  0.6096463  0.2300424
[5,] -0.3286771 -1.1267573 -0.7696059  1.30209580 -0.4884744  0.2300424
[6,] -0.2894253 -0.3217923 -2.1049049  0.74963379  0.6096463  0.2300424
              SPS         SL         SW          ST       THSW        TY
[1,] -1.039330035 -0.8560607 -0.3231698 -0.18899627 -0.2186367 1.2041564
[2,] -1.188577725  0.8939045 -2.1860802 -1.18448582 -1.3676185 2.2161072
[3,]  0.602394556 -1.5534795 -0.7281503 -0.70573894 -0.4611995 2.0098316
[4,]  0.005403796 -0.2741651 -0.1814266  0.05417675 -0.4292834 2.3788357
[5,]  1.199385317 -0.8688966  0.7635279 -0.42457013 -0.2314032 0.9047839
[6,] -0.293091585 -0.5266051  0.1088094 -0.14340133 -0.3718343 0.9764347
> fviz_nbclust(df,FUNcluster,method = c("silohouette","wss","gap_stat"))
Error in match.arg(method) : 'arg' must be of length 1
> # Elbow method
> fviz_nbclust(df, kmeans, method = "wss") +
+   geom_vline(xintercept = 4, linetype = 2)+
+   labs(subtitle = "Elbow method")
> # Silhouette method
> fviz_nbclust(df, kmeans, method = "silhouette")+
+   labs(subtitle = "Silhouette method")
> # Gap statistic
> # nboot = 50 to keep the function speedy. 
> # recommended value: nboot= 500 for your analysis.
> # Use verbose = FALSE to hide computing progression.
> set.seed(123)
> fviz_nbclust(df, kmeans, nstart = 25,  method = "gap_stat", nboot = 50)+
+   labs(subtitle = "Gap statistic method")
Clustering k = 1,2,..., K.max (= 10): .. done
Bootstrapping, b = 1,2,..., B (= 50)  [one "." per sample]:
.................................................. 50 
> #K-means
> library(NbClust)
> NbClust(data = df, diss = NULL, distance = "euclidean", min.nc = 2, max.nc = 15,
+         
+         method = "kmeans", index = "all", alphaBeale = 0.1)
*** : The Hubert index is a graphical method of determining the number of clusters.
                In the plot of Hubert index, we seek a significant knee that corresponds to a 
                significant increase of the value of the measure i.e the significant peak in Hubert
                index second differences plot. 
 
*** : The D index is a graphical method of determining the number of clusters. 
                In the plot of D index, we seek a significant knee (the significant peak in Dindex
                second differences plot) that corresponds to a significant increase of the value of
                the measure. 
 
******************************************************************* 
* Among all indices:                                                
* 5 proposed 2 as the best number of clusters 
* 11 proposed 3 as the best number of clusters 
* 2 proposed 12 as the best number of clusters 
* 5 proposed 15 as the best number of clusters 

                   ***** Conclusion *****                            
 
* According to the majority rule, the best number of clusters is  3 
 
 
******************************************************************* 
$All.index
       KL      CH Hartigan     CCC     Scott      Marriot    TrCovW
2  1.1025 22.1215  17.8780 -0.7618  173.1985 7.637983e+32 16804.364
3  2.4591 21.5437   8.9189 -0.3570  395.1393 2.536490e+32 10742.423
4  1.4675 18.3056   6.4424 -1.2092  479.5816 2.177538e+32  8427.119
5  1.2544 15.9855   5.2009 -1.7682  569.6546 1.565164e+32  7528.238
6  1.2950 14.2978   4.1804 -2.1927  639.1594 1.237947e+32  6632.092
7  0.3333 12.9456   8.8335 -2.7316  676.9842 1.216137e+32  6148.153
8  2.1726 13.1358   4.8038 -1.0635  820.1518 4.623368e+31  5121.936
9  2.6221 12.4888   2.5509 -0.9058  936.4640 2.146844e+31  4932.438
10 0.5622 11.5404   3.4500 -1.8549  951.3188 2.331847e+31  4670.892
11 0.4155 10.9650   6.8536 -2.2887 1022.9211 1.521992e+31  4267.893
12 5.3144 11.1348   2.0268 -1.1981 1191.1273 4.248536e+30  4116.159
13 0.3742 10.4730   3.8386 -1.7842 1188.4065 5.104461e+30  3884.069
14 1.3425 10.2228   3.0353 -1.4629 1263.5561 3.097172e+30  3636.234
15 1.0920  9.8939   2.8082 -1.4749 1329.1864 2.019190e+30  3405.977
      TraceW Friedman  Rubin Cindex     DB Silhouette   Duda Pseudot2
2  1733.5978   9.5570 1.1940 0.3544 2.2125     0.1544 1.8781 -48.1566
3  1498.5831  25.4251 1.3813 0.3052 1.8199     0.1648 1.3479 -11.3567
4  1388.9556  29.2042 1.4903 0.2881 2.0810     0.1198 1.7266 -24.4086
5  1313.4064  31.3612 1.5761 0.2769 1.9963     0.1205 1.8334 -20.4560
6  1254.6208  32.6896 1.6499 0.2704 2.1482     0.0946 1.8047 -17.8353
7  1208.6861  30.2984 1.7126 0.2633 1.9976     0.0994 1.5237 -10.3113
8  1118.0760  38.6101 1.8514 0.3109 1.8938     0.1077 2.2814 -17.9736
9  1070.4619  41.9651 1.9337 0.2939 1.8847     0.1176 1.5279  -8.6372
10 1045.5357  42.8608 1.9798 0.2919 1.8559     0.1068 2.1700 -12.4011
11 1012.5792  44.4031 2.0443 0.2846 1.8593     0.1014 2.1287  -9.5441
12  950.5355  50.2205 2.1777 0.2727 1.7033     0.1259 0.9023   1.0823
13  932.3649  49.0535 2.2202 0.2728 1.6889     0.1088 1.2190  -3.0536
14  898.8662  52.1751 2.3029 0.2653 1.6807     0.1142 1.4823  -6.1819
15  872.8910  54.4487 2.3714 0.2580 1.6487     0.1182 0.9220   0.5923
     Beale Ratkowsky     Ball Ptbiserial     Frey McClain   Dunn Hubert
2  -5.7129    0.2455 866.7989     0.2869  -0.4621  0.8022 0.1927 0.0011
3  -3.1472    0.2744 499.5277     0.5054   1.6779  0.9908 0.1935 0.0023
4  -5.1019    0.2688 347.2389     0.4261   0.8003  1.9434 0.2000 0.0024
5  -5.4311    0.2587 262.6813     0.3983   1.2734  2.6544 0.2013 0.0024
6  -5.2909    0.2492 209.1035     0.3572   0.2394  3.6460 0.1843 0.0026
7  -4.1143    0.2380 172.6694     0.3548  -0.0586  4.0493 0.2029 0.0026
8  -5.6126    0.2357 139.7595     0.3724   0.1148  4.1442 0.1877 0.0028
9  -4.1099    0.2274 118.9402     0.3770   1.8907  4.6821 0.1877 0.0030
10 -5.9864    0.2186 104.5536     0.3539   0.5391  5.4241 0.1877 0.0031
11 -5.7951    0.2125  92.0527     0.3318   0.0314  6.5598 0.1877 0.0031
12  1.2289    0.2099  79.2113     0.3381 -15.1748  6.8874 0.1893 0.0031
13 -2.0567    0.2035  71.7204     0.3213   0.2068  7.6428 0.2191 0.0032
14 -3.7514    0.1992  64.2047     0.3133   0.1363  8.4767 0.2300 0.0033
15  0.8456    0.1953  58.1927     0.3093   0.0935  9.1311 0.2399 0.0034
   SDindex Dindex   SDbw
2   1.1017 3.6642 0.8523
3   1.1299 3.4744 1.0256
4   1.2062 3.3375 0.9096
5   1.2352 3.2318 0.8407
6   1.1947 3.1514 0.7771
7   1.1214 3.0914 0.7411
8   1.0723 3.0050 0.7254
9   1.0602 2.9450 0.7160
10  1.0645 2.9019 0.7077
11  1.1036 2.8458 0.6776
12  1.0025 2.7500 0.6285
13  0.9773 2.7250 0.6268
14  0.9993 2.6680 0.6011
15  0.9738 2.6352 0.5807

$All.CriticalValues
   CritValue_Duda CritValue_PseudoT2 Fvalue_Beale
2          0.8126            23.7557       1.0000
3          0.8057            10.6128       1.0000
4          0.7884            15.5631       1.0000
5          0.7519            14.8517       1.0000
6          0.7372            14.2617       1.0000
7          0.7562             9.6743       1.0000
8          0.5391            27.3598       1.0000
9          0.7424             8.6747       1.0000
10         0.6350            13.2202       1.0000
11         0.6172            11.1652       1.0000
12         0.6637             5.0665       0.2422
13         0.6755             8.1654       1.0000
14         0.6860             8.6949       1.0000
15         0.5391             5.9850       0.6423

$Best.nc
                     KL      CH Hartigan    CCC    Scott      Marriot
Number_clusters 12.0000  2.0000   3.0000  3.000   3.0000 3.000000e+00
Value_Index      5.3144 22.1215   8.9591 -0.357 221.9408 4.742541e+32
                  TrCovW   TraceW Friedman  Rubin Cindex      DB Silhouette
Number_clusters    3.000   3.0000   3.0000 12.000 15.000 15.0000     3.0000
Value_Index     6061.941 125.3873  15.8681 -0.091  0.258  1.6487     0.1648
                  Duda PseudoT2   Beale Ratkowsky     Ball PtBiserial Frey
Number_clusters 2.0000   2.0000  2.0000    3.0000   3.0000     3.0000    1
Value_Index     1.8781 -48.1566 -5.7129    0.2744 367.2712     0.5054   NA
                McClain    Dunn Hubert SDindex Dindex    SDbw
Number_clusters  2.0000 15.0000      0 15.0000      0 15.0000
Value_Index      0.8022  0.2399      0  0.9738      0  0.5807

$Best.partition
  [1] 3 2 3 3 3 3 3 3 1 3 3 1 1 1 3 1 3 1 3 2 3 3 3 1 2 1 3 3 2 1 3 1 3 2 3
 [36] 3 1 3 3 3 1 3 1 3 1 3 3 3 1 3 3 1 3 1 1 1 3 3 3 1 1 1 3 3 3 1 1 3 1 1
 [71] 1 1 3 3 3 3 1 3 1 1 3 3 3 3 1 3 1 1 1 1 3 1 3 3 3 3 3 3 1 3 3 3 3 3 3
[106] 2 2 2 2 2 1 2 1 1 1 1

> #Hirerical clustera
> ?hclust
> library(NbClust)
> NbClust(data = df, diss = NULL, distance = "euclidean", min.nc = 2, max.nc = 15,
+         
+         method = "average", index = "all", alphaBeale = 0.1)
*** : The Hubert index is a graphical method of determining the number of clusters.
                In the plot of Hubert index, we seek a significant knee that corresponds to a 
                significant increase of the value of the measure i.e the significant peak in Hubert
                index second differences plot. 
 
*** : The D index is a graphical method of determining the number of clusters. 
                In the plot of D index, we seek a significant knee (the significant peak in Dindex
                second differences plot) that corresponds to a significant increase of the value of
                the measure. 
 
******************************************************************* 
* Among all indices:                                                
* 9 proposed 2 as the best number of clusters 
* 2 proposed 3 as the best number of clusters 
* 6 proposed 4 as the best number of clusters 
* 1 proposed 10 as the best number of clusters 
* 1 proposed 11 as the best number of clusters 
* 4 proposed 12 as the best number of clusters 
* 1 proposed 15 as the best number of clusters 

                   ***** Conclusion *****                            
 
* According to the majority rule, the best number of clusters is  2 
 
 
******************************************************************* 
$All.index
        KL     CH Hartigan      CCC     Scott      Marriot    TrCovW
2   4.4189 5.0796   6.1471  -9.0843   72.7928 1.815053e+33 23888.980
3   0.1053 5.6998  12.6113 -11.5068  182.8493 1.581356e+33 22206.257
4  84.5396 8.3531   2.9158 -10.4653  390.4298 4.696157e+32 17964.028
5   0.1282 7.0930   3.0792 -12.4904  439.8381 4.792721e+32 16928.068
6  31.3333 6.3896   1.8748 -13.9770  518.5821 3.500527e+32 16534.078
7   0.0476 5.6758   2.1606 -15.7129  587.6101 2.627797e+32 16316.542
8   0.1597 5.2217   4.8145 -17.1436  628.0061 2.422904e+32 15701.101
9   5.9491 5.3247   1.8270 -17.2266  687.2625 1.839884e+32 13726.543
10  1.1542 4.9700   1.6169 -18.6598  738.5570 1.459697e+32 13507.261
11  0.0256 4.6586  23.9718 -20.1059  779.4183 1.241843e+32 13064.365
12 52.1705 7.3109   1.3663 -11.7774  952.0795 3.335911e+31  6575.484
13  0.6001 6.8372   1.5778 -12.3623  975.4803 3.199838e+31  6400.941
14  1.4574 6.4659   1.2805 -12.7908 1032.3997 2.271935e+31  6259.259
15  0.7812 6.1104   1.3585 -13.3121 1063.2796 1.998530e+31  6114.009
     TraceW Friedman  Rubin Cindex     DB Silhouette   Duda Pseudot2
2  1981.700   2.7290 1.0446 0.4351 0.4399     0.4422 0.9488   6.0931
3  1880.311   7.8069 1.1009 0.4234 1.0328     0.3019 0.8973  12.5892
4  1691.529  22.2518 1.2237 0.4517 1.2542     0.2920 0.9982   0.1900
5  1648.610  23.4471 1.2556 0.4593 1.1145     0.2462 0.6612   2.5624
6  1604.111  27.3818 1.2904 0.4589 1.0923     0.2366 1.0337  -0.0326
7  1577.229  30.6795 1.3124 0.4588 0.9654     0.2378 1.0064  -0.6504
8  1546.573  31.9062 1.3384 0.4559 0.9276     0.1790 0.9619   4.0039
9  1480.571  34.2569 1.3981 0.5177 0.9852     0.1425 1.7152  -0.8340
10 1455.715  36.1991 1.4220 0.5176 0.9348     0.1436 1.5034  -0.3348
11 1433.844  37.5022 1.4437 0.5175 0.8315     0.1504 0.8031  24.0256
12 1167.338  47.7487 1.7733 0.4935 0.9603     0.1671 5.4301   0.0000
13 1152.201  48.4426 1.7966 0.4934 0.8905     0.1814 1.8740  -0.4664
14 1134.817  53.4065 1.8241 0.4933 0.8404     0.1882 4.3501   0.0000
15 1120.748  54.3362 1.8470 0.4933 0.7813     0.2031 1.5610  -0.3594
     Beale Ratkowsky     Ball Ptbiserial    Frey McClain   Dunn Hubert
2   0.6676    0.1238 990.8499     0.3593 13.3740  0.0097 0.5439 0.0038
3   1.4166    0.1510 626.7702     0.4578  1.6764  0.0470 0.4794 0.0035
4   0.0228    0.1863 422.8822     0.6508  1.1150  0.1407 0.4643 0.0034
5   5.3344    0.1831 329.7219     0.6711  2.3644  0.1557 0.4181 0.0034
6  -0.2033    0.1784 267.3518     0.6721  2.7872  0.1576 0.4181 0.0032
7  -0.0789    0.1699 225.3184     0.6723  3.7963  0.1579 0.4181 0.0032
8   0.4903    0.1650 193.3216     0.6728  3.0693  0.1750 0.3909 0.0031
9  -3.4723    0.1695 164.5079     0.6758  2.6347  0.2288 0.3481 0.0030
10 -2.0911    0.1647 145.5715     0.6759  3.5236  0.2294 0.3481 0.0030
11  3.0313    0.1602 130.3495     0.6758  2.4248  0.2298 0.3481 0.0030
12  0.0000    0.1853  97.2781     0.5540  0.7444  1.0940 0.3160 0.0027
13 -2.9127    0.1799  88.6308     0.5540  0.7663  1.0947 0.3160 0.0027
14  0.0000    0.1750  81.0584     0.5540  1.1453  1.0960 0.3160 0.0027
15 -2.2445    0.1707  74.7165     0.5539  1.3548  1.0966 0.3160 0.0027
   SDindex Dindex   SDbw
2   0.4466 3.9568 0.4834
3   0.6372 3.8692 0.6747
4   0.7384 3.7138 0.8034
5   0.6391 3.6570 0.6392
6   0.6458 3.6104 0.6218
7   0.5738 3.5619 0.5142
8   0.5278 3.5142 0.4488
9   0.5609 3.4482 0.4753
10  0.5503 3.4017 0.3991
11  0.5117 3.3588 0.3371
12  0.6676 3.0287 0.3519
13  0.6087 2.9813 0.2507
14  0.5919 2.9419 0.2216
15  0.5659 2.8962 0.1656

$All.CriticalValues
   CritValue_Duda CritValue_PseudoT2 Fvalue_Beale
2          0.8674            17.2698       0.8458
3          0.8661            17.0007       0.1133
4          0.8629            16.3640       1.0000
5          0.5707             3.7619       0.0000
6          0.3628             1.7562       1.0000
7          0.8624            16.2720       1.0000
8          0.8619            16.1797       0.9633
9          0.4434             2.5101       1.0000
10         0.3628             1.7562       1.0000
11         0.8604            15.9012       0.0000
12         0.2276             0.0000          NaN
13         0.3628             1.7562       1.0000
14         0.2276             0.0000          NaN
15         0.3628             1.7562       1.0000

$Best.nc
                     KL     CH Hartigan     CCC    Scott      Marriot
Number_clusters  4.0000 4.0000  12.0000  2.0000   4.0000 4.000000e+00
Value_Index     84.5396 8.3531  22.6055 -9.0843 207.5805 1.121396e+33
                  TrCovW   TraceW Friedman   Rubin Cindex     DB Silhouette
Number_clusters   12.000  12.0000   4.0000 12.0000 3.0000 2.0000     2.0000
Value_Index     6488.882 251.3696  14.4448 -0.3063 0.4234 0.4399     0.4422
                  Duda PseudoT2  Beale Ratkowsky     Ball PtBiserial
Number_clusters 2.0000   2.0000 2.0000    4.0000   3.0000    10.0000
Value_Index     0.9488   6.0931 0.6676    0.1863 364.0797     0.6759
                   Frey McClain   Dunn Hubert SDindex Dindex    SDbw
Number_clusters 11.0000  2.0000 2.0000      0  2.0000      0 15.0000
Value_Index      2.4248  0.0097 0.5439      0  0.4466      0  0.1656

$Best.partition
  [1] 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [36] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [71] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[106] 1 1 1 1 1 1 1 1 1 1 1

Warning messages:
1: In pf(beale, pp, df2) : NaNs produced
2: In pf(beale, pp, df2) : NaNs produced
> # Silhouette method with increased font size
> fviz_nbclust(df, kmeans, method = "silhouette") +
+   labs(subtitle = "Silhouette method") +
+   theme(
+     plot.subtitle = element_text(size = 18), # Increase subtitle font size
+     axis.title = element_text(size = 18),   # Increase axis title font size
+     axis.text = element_text(size = 16)     # Increase axis text font size
+   )
